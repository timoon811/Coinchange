/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_SERVER_PORT = 3001;
const TEST_SERVER_URL = `http://localhost:${TEST_SERVER_PORT}`;

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_CLIENT_DATA = {
  telegramUserId: `test_${Date.now()}`,
  username: 'integration_test_user',
  firstName: 'Integration',
  lastName: 'Test',
  phone: '+1234567890'
};

const TEST_ADMIN_CREDENTIALS = {
  username: 'admin',
  password: 'admin123'
};

let serverProcess = null;
let authToken = null;

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(endpoint, options = {}) {
  const url = `${TEST_SERVER_URL}${endpoint}`;
  const defaultOptions = {
    headers: {
      'Content-Type': 'application/json',
      ...(authToken && { 'Authorization': `Bearer ${authToken}` })
    }
  };

  const fetchOptions = {
    ...defaultOptions,
    ...options,
    headers: {
      ...defaultOptions.headers,
      ...options.headers
    }
  };

  try {
    const response = await fetch(url, fetchOptions);
    const data = await response.json();
    return { response, data };
  } catch (error) {
    console.error(`Request failed: ${endpoint}`, error);
    throw error;
  }
}

async function authenticateAdmin() {
  try {
    const { response, data } = await makeRequest('/api/auth/login', {
      method: 'POST',
      body: JSON.stringify(TEST_ADMIN_CREDENTIALS)
    });

    if (response.ok && data.success) {
      authToken = data.token;
      return true;
    }
    return false;
  } catch (error) {
    console.error('Authentication failed:', error);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function waitForServer(timeout = 30000) {
  const startTime = Date.now();
  
  while (Date.now() - startTime < timeout) {
    try {
      const response = await fetch(`${TEST_SERVER_URL}/api/health`);
      if (response.ok) {
        return true;
      }
    } catch (error) {
      // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  return false;
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
describe('Integration Tests - Client API', () => {
  let createdClientId = null;

  beforeAll(async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    const packageJsonPath = path.join(__dirname, '..', 'package.json');
    if (!fs.existsSync(packageJsonPath)) {
      throw new Error('package.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞.');
    }

    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    const serverReady = await waitForServer();
    
    if (!serverReady) {
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–µ—Ä–≤–µ—Ä—É...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç
      try {
        const response = await fetch('http://localhost:3000/api/health');
        if (response.ok) {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É 3000');
          TEST_SERVER_URL.replace('3001', '3000');
        } else {
          throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } catch (error) {
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
        return;
      }
    }

    console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const authSuccess = await authenticateAdmin();
    if (!authSuccess) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
    }
  }, 60000);

  afterAll(async () => {
    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (createdClientId && authToken) {
      try {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã DELETE endpoint
        // await makeRequest(`/api/clients/${createdClientId}`, { method: 'DELETE' });
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
      }
    }

    if (serverProcess) {
      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
      serverProcess.kill();
    }
  });

  describe('Client Registration via User Interface', () => {
    test('should register new client through client auth endpoint', async () => {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞...');
      
      const { response, data } = await makeRequest('/api/client/auth', {
        method: 'POST',
        body: JSON.stringify(TEST_CLIENT_DATA)
      });

      expect(response.status).toBe(200);
      expect(data.success).toBe(true);
      expect(data.data).toHaveProperty('id');
      expect(data.data.telegramUserId).toBe(TEST_CLIENT_DATA.telegramUserId);
      expect(data.data.firstName).toBe(TEST_CLIENT_DATA.firstName);
      
      createdClientId = data.data.id;
      console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${createdClientId}`);
    });

    test('should update existing client on repeated login', async () => {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞...');
      
      const updatedData = {
        ...TEST_CLIENT_DATA,
        firstName: 'Updated Integration',
        lastName: 'Updated Test'
      };

      const { response, data } = await makeRequest('/api/client/auth', {
        method: 'POST',
        body: JSON.stringify(updatedData)
      });

      expect(response.status).toBe(200);
      expect(data.success).toBe(true);
      expect(data.data.firstName).toBe('Updated Integration');
      expect(data.data.lastName).toBe('Updated Test');
      expect(data.data.telegramUserId).toBe(TEST_CLIENT_DATA.telegramUserId);
    });
  });

  describe('Admin Panel Client Management', () => {
    test('should fetch clients list from admin panel', async () => {
      if (!authToken) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...');
      
      const { response, data } = await makeRequest('/api/clients');

      expect(response.status).toBe(200);
      expect(data.success).toBe(true);
      expect(Array.isArray(data.data)).toBe(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
      const testClient = data.data.find(
        client => client.telegramUserId === TEST_CLIENT_DATA.telegramUserId
      );
      expect(testClient).toBeTruthy();
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.data.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    });

    test('should search for specific client', async () => {
      if (!authToken) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞...');
      
      const { response, data } = await makeRequest(
        `/api/clients?search=${TEST_CLIENT_DATA.username}`
      );

      expect(response.status).toBe(200);
      expect(data.success).toBe(true);
      
      const foundClient = data.data.find(
        client => client.username === TEST_CLIENT_DATA.username
      );
      expect(foundClient).toBeTruthy();
      
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫');
    });

    test('should get detailed client information', async () => {
      if (!authToken || !createdClientId) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
      
      const { response, data } = await makeRequest(`/api/clients/${createdClientId}`);

      expect(response.status).toBe(200);
      expect(data.success).toBe(true);
      expect(data.data.id).toBe(createdClientId);
      expect(data.data).toHaveProperty('stats');
      expect(data.data).toHaveProperty('requests');
      expect(data.data.stats).toHaveProperty('totalVolume');
      expect(data.data.stats).toHaveProperty('conversionRate');
      
      console.log('‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
    });

    test('should update client information', async () => {
      if (!authToken || !createdClientId) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...');
      
      const updateData = {
        notes: 'Integration test notes',
        tags: ['integration-test', 'automated'],
        isBlocked: false
      };

      const { response, data } = await makeRequest(`/api/clients/${createdClientId}`, {
        method: 'PATCH',
        body: JSON.stringify(updateData)
      });

      expect(response.status).toBe(200);
      expect(data.success).toBe(true);
      expect(data.data.notes).toBe('Integration test notes');
      expect(data.data.tags).toContain('integration-test');
      expect(data.data.isBlocked).toBe(false);
      
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    });

    test('should toggle client VIP status', async () => {
      if (!authToken || !createdClientId) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è VIP —Å—Ç–∞—Ç—É—Å–∞...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º VIP —Ç–µ–≥
      const { response: vipResponse, data: vipData } = await makeRequest(
        `/api/clients/${createdClientId}`, 
        {
          method: 'PATCH',
          body: JSON.stringify({ tags: ['VIP', 'integration-test'] })
        }
      );

      expect(vipResponse.status).toBe(200);
      expect(vipData.data.tags).toContain('VIP');
      
      // –£–±–∏—Ä–∞–µ–º VIP —Ç–µ–≥
      const { response: normalResponse, data: normalData } = await makeRequest(
        `/api/clients/${createdClientId}`, 
        {
          method: 'PATCH',
          body: JSON.stringify({ tags: ['integration-test'] })
        }
      );

      expect(normalResponse.status).toBe(200);
      expect(normalData.data.tags).not.toContain('VIP');
      
      console.log('‚úÖ VIP —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω');
    });

    test('should block and unblock client', async () => {
      if (!authToken || !createdClientId) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞...');
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      const { response: blockResponse, data: blockData } = await makeRequest(
        `/api/clients/${createdClientId}`, 
        {
          method: 'PATCH',
          body: JSON.stringify({ isBlocked: true })
        }
      );

      expect(blockResponse.status).toBe(200);
      expect(blockData.data.isBlocked).toBe(true);
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      const { response: unblockResponse, data: unblockData } = await makeRequest(
        `/api/clients/${createdClientId}`, 
        {
          method: 'PATCH',
          body: JSON.stringify({ isBlocked: false })
        }
      );

      expect(unblockResponse.status).toBe(200);
      expect(unblockData.data.isBlocked).toBe(false);
      
      console.log('‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    });
  });

  describe('Data Consistency Checks', () => {
    test('client data should be consistent between endpoints', async () => {
      if (!createdClientId) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
        return;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π API
      const { response: clientResponse, data: clientData } = await makeRequest('/api/client/auth', {
        method: 'POST',
        body: JSON.stringify({ telegramUserId: TEST_CLIENT_DATA.telegramUserId })
      });

      expect(clientResponse.status).toBe(200);
      
      if (authToken) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API
        const { response: adminResponse, data: adminData } = await makeRequest(
          `/api/clients/${createdClientId}`
        );

        expect(adminResponse.status).toBe(200);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        expect(adminData.data.telegramUserId).toBe(clientData.data.telegramUserId);
        expect(adminData.data.firstName).toBe(clientData.data.firstName);
        expect(adminData.data.lastName).toBe(clientData.data.lastName);
        expect(adminData.data.username).toBe(clientData.data.username);
        expect(adminData.data.phone).toBe(clientData.data.phone);
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –º–µ–∂–¥—É API');
      }
    });

    test('field validation should work correctly', async () => {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π...');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
      const { response: invalidResponse } = await makeRequest('/api/client/auth', {
        method: 'POST',
        body: JSON.stringify({
          username: 'test_without_telegram_id',
          firstName: 'Test'
          // telegramUserId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        })
      });

      expect(invalidResponse.status).toBe(400);
      
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    });
  });

  describe('Performance and Load Tests', () => {
    test('should handle multiple concurrent requests', async () => {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ concurrent –∑–∞–ø—Ä–æ—Å–æ–≤...');
      
      const promises = [];
      for (let i = 0; i < 5; i++) {
        promises.push(
          makeRequest('/api/client/auth', {
            method: 'POST',
            body: JSON.stringify({
              telegramUserId: `concurrent_test_${Date.now()}_${i}`,
              username: `concurrent_user_${i}`,
              firstName: `Test${i}`
            })
          })
        );
      }

      const results = await Promise.allSettled(promises);
      const successfulRequests = results.filter(
        result => result.status === 'fulfilled' && result.value.response.ok
      );

      expect(successfulRequests.length).toBeGreaterThan(0);
      console.log(`‚úÖ ${successfulRequests.length} –∏–∑ ${promises.length} –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω—ã`);
    });

    test('should handle pagination correctly', async () => {
      if (!authToken) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...');
      
      const { response, data } = await makeRequest('/api/clients?page=1&limit=5');

      expect(response.status).toBe(200);
      expect(data.success).toBe(true);
      expect(data.data.length).toBeLessThanOrEqual(5);
      
      if (data.pagination) {
        expect(data.pagination).toHaveProperty('page');
        expect(data.pagination).toHaveProperty('limit');
        expect(data.pagination).toHaveProperty('total');
        expect(data.pagination.page).toBe(1);
        expect(data.pagination.limit).toBe(5);
      }
      
      console.log('‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    });
  });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Jest
module.exports = {
  testEnvironment: 'node',
  testTimeout: 30000,
  setupFilesAfterEnv: ['<rootDir>/tests/integration-setup.js']
};



