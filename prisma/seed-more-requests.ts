import { PrismaClient, RequestStatus, OperationDirection, NetworkType, UserRole } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫...')

  // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ñ–∏—Å—ã
  const clients = await prisma.client.findMany({ take: 10 })
  const offices = await prisma.office.findMany()
  const users = await prisma.user.findMany({ 
    where: { 
      role: UserRole.CASHIER,
      isActive: true 
    } 
  })

  if (clients.length === 0 || offices.length === 0) {
    console.log('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ñ–∏—Å—ã')
    return
  }

  const currencies = ['BTC', 'ETH', 'USDT', 'LTC', 'BNB', 'ADA', 'XRP', 'DOGE', 'MATIC', 'SOL']
  const statuses = Object.values(RequestStatus)
  const directions = Object.values(OperationDirection)

  // –°–æ–∑–¥–∞–µ–º 50 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫
  for (let i = 0; i < 50; i++) {
    const client = clients[Math.floor(Math.random() * clients.length)]
    const office = offices[Math.floor(Math.random() * offices.length)]
    const status = statuses[Math.floor(Math.random() * statuses.length)]
    const direction = directions[Math.floor(Math.random() * directions.length)]
    const fromCurrency = currencies[Math.floor(Math.random() * currencies.length)]
    const toCurrency = currencies[Math.floor(Math.random() * currencies.length)]
    
    // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π
    const createdAt = new Date()
    createdAt.setDate(createdAt.getDate() - Math.floor(Math.random() * 30))
    
    const expectedAmountFrom = 100 + Math.random() * 10000
    const rateValue = 0.8 + Math.random() * 0.4 // –û—Ç 0.8 –¥–æ 1.2
    const expectedAmountTo = expectedAmountFrom * rateValue
    const commissionPercent = 1 + Math.random() * 4 // –û—Ç 1% –¥–æ 5%

    const requestId = `req-${Date.now()}-${Math.random().toString(36).substring(2, 8)}-${i}`

    const request = await prisma.request.create({
      data: {
        requestId,
        clientId: client.id,
        officeId: office.id,
        assignedUserId: users.length > 0 ? users[Math.floor(Math.random() * users.length)].id : undefined,
        direction,
        status,
        source: Math.random() > 0.5 ? 'telegram' : 'manual',
        createdAt,
        updatedAt: createdAt,
        assignedAt: status !== RequestStatus.NEW ? createdAt : undefined,
        completedAt: status === RequestStatus.COMPLETED ? new Date(createdAt.getTime() + Math.random() * 24 * 60 * 60 * 1000) : undefined,
        slaDeadline: new Date(createdAt.getTime() + 24 * 60 * 60 * 1000), // 24 —á–∞—Å–∞
      },
    })

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await prisma.requestFinance.create({
      data: {
        requestId: request.id,
        fromCurrency,
        fromNetwork: Math.random() > 0.5 ? NetworkType.MAINNET : NetworkType.TESTNET,
        toCurrency,
        expectedAmountFrom,
        expectedAmountTo,
        rateValue,
        commissionPercent,
      },
    })

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    await prisma.requisites.create({
      data: {
        requestId: request.id,
        walletAddress: direction === OperationDirection.CRYPTO_TO_FIAT ? 
          `${fromCurrency.toLowerCase()}1${Math.random().toString(36).substring(2, 30)}` : undefined,
        cardNumber: direction === OperationDirection.FIAT_TO_CRYPTO ? 
          `****-****-****-${Math.floor(1000 + Math.random() * 9000)}` : undefined,
        cardMasked: direction === OperationDirection.FIAT_TO_CRYPTO ? 
          `****-****-****-${Math.floor(1000 + Math.random() * 9000)}` : undefined,
        bankName: direction === OperationDirection.FIAT_TO_CRYPTO ? 
          ['–°–±–µ—Ä–±–∞–Ω–∫', '–í–¢–ë', '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫', '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'][Math.floor(Math.random() * 4)] : undefined,
      },
    })

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (Math.random() > 0.7) {
      const comments = [
        '–ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
        '–û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
        '–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º',
        '–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
        '–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã',
        '–£—Ç–æ—á–Ω—è–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç',
        '–ì–æ—Ç–æ–≤–æ –∫ –≤—ã–ø–ª–∞—Ç–µ'
      ]
      
      await prisma.comment.create({
        data: {
          requestId: request.id,
          authorId: users.length > 0 ? users[Math.floor(Math.random() * users.length)].id : client.id,
          text: comments[Math.floor(Math.random() * comments.length)],
          isInternal: Math.random() > 0.5,
        },
      })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞
    await prisma.client.update({
      where: { id: client.id },
      data: {
        totalRequests: { increment: 1 },
        totalVolume: { increment: expectedAmountFrom },
        lastContactDate: createdAt,
      },
    })

    if ((i + 1) % 10 === 0) {
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${i + 1} –∑–∞—è–≤–æ–∫ –∏–∑ 50`)
    }
  }

  console.log('üéâ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!')
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
