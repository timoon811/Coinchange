// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª–∏–µ–Ω—Ç–æ–≤
const BASE_URL = 'http://localhost:3000'

const testClientCreation = async () => {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...')
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (GET –∑–∞–ø—Ä–æ—Å)
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/clients...')
    const getResponse = await fetch(`${BASE_URL}/api/clients`)
    console.log('üì• GET –°—Ç–∞—Ç—É—Å:', getResponse.status)
    
    if (getResponse.status === 401) {
      console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è')
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω
      console.log('\n2Ô∏è‚É£ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω...')
      const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          username: 'admin',
          password: 'admin123'
        })
      })
      
      console.log('üì• Login —Å—Ç–∞—Ç—É—Å:', loginResponse.status)
      const loginResult = await loginResponse.json()
      console.log('üì• Login —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', loginResult)
      
      if (loginResult.success && loginResult.token) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!')
        
        // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
        console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º...')
        
        const clientData = {
          firstName: '–¢–µ—Å—Ç',
          lastName: '–ö–ª–∏–µ–Ω—Ç',
          username: '@testuser',
          phone: '+1234567890',
          telegramUserId: '123456789',
          tags: ['VIP', '—Ç–µ—Å—Ç–æ–≤—ã–π'],
          notes: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API',
          isBlocked: false
        }
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', clientData)
        
        const createResponse = await fetch(`${BASE_URL}/api/clients`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${loginResult.token}`
          },
          body: JSON.stringify(clientData)
        })
        
        console.log('üì• Create —Å—Ç–∞—Ç—É—Å:', createResponse.status)
        const createResult = await createResponse.text()
        console.log('üì• Create —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', createResult)
        
        if (createResponse.ok) {
          console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞')
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
      }
    } else {
      const getResult = await getResponse.text()
      console.log('üì• GET —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', getResult)
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testClientCreation()
