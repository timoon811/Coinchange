import cron from 'node-cron'
import { prisma } from './prisma'
import { RequestStatus, NotificationType } from '@prisma/client'
import { addMinutes, isAfter, differenceInMinutes } from 'date-fns'
import { NotificationService } from './notifications'

export class SLAMonitor {
  private static isRunning = false

  static start() {
    if (this.isRunning) {
      console.log('SLA Monitor —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
      return
    }

    this.isRunning = true
    console.log('üöÄ SLA Monitor –∑–∞–ø—É—â–µ–Ω')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    cron.schedule('*/5 * * * *', async () => {
      try {
        await this.checkSLA()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ SLA Monitor:', error)
      }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
    cron.schedule('0 * * * *', async () => {
      try {
        await this.checkOverdueRequests()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', error)
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    cron.schedule('0 9 * * *', async () => {
      try {
        await this.sendDailyReport()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error)
      }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:30
    cron.schedule('30 9 * * *', async () => {
      try {
        await NotificationService.checkExchangeRatesUpdate()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error)
      }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Å—á–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    cron.schedule('0 */4 * * *', async () => {
      try {
        await NotificationService.checkAccountBalances()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤ —Å—á–µ—Ç–æ–≤:', error)
      }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    cron.schedule('0 10 * * *', async () => {
      try {
        await NotificationService.checkExpiringDeposits()
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error)
      }
    })
  }

  static async checkSLA() {
    const now = new Date()
    const upcomingTime = addMinutes(now, 30) // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö SLA –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç
    const upcomingRequests = await prisma.request.findMany({
      where: {
        slaDeadline: {
          gt: now,
          lt: upcomingTime,
        },
        status: {
          notIn: [RequestStatus.COMPLETED, RequestStatus.CANCELED, RequestStatus.REJECTED],
        },
        isOverdue: false,
      },
      include: {
        client: {
          select: {
            firstName: true,
            lastName: true,
          },
        },
        assignedUser: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
          },
        },
        office: {
          select: {
            name: true,
          },
        },
      },
    })

    for (const request of upcomingRequests) {
      const minutesToSLA = differenceInMinutes(request.slaDeadline!, now)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞—Å—Å–∏—Ä—É
      if (request.assignedUser) {
        const existingNotification = await prisma.notification.findFirst({
          where: {
            userId: request.assignedUser.id,
            type: NotificationType.SLA_OVERDUE,
            payload: {
              path: ['requestId'],
              equals: request.id,
            },
            createdAt: {
              gt: addMinutes(now, -10), // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            },
          },
        })

        if (!existingNotification) {
          await prisma.notification.create({
            data: {
              userId: request.assignedUser.id,
              type: NotificationType.SLA_OVERDUE,
              title: '–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω SLA',
              message: `–ó–∞—è–≤–∫–∞ ${request.requestId} (${request.client.firstName}) –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${minutesToSLA} –º–∏–Ω`,
              payload: {
                requestId: request.id,
                clientName: request.client.firstName,
                minutesLeft: minutesToSLA,
              },
            },
          })
        }
      }

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ "–ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω"
      await prisma.request.update({
        where: { id: request.id },
        data: {
          isOverdue: false, // –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
        },
      })
    }

    console.log(`‚è∞ SLA check: –Ω–∞–π–¥–µ–Ω–æ ${upcomingRequests.length} –∑–∞—è–≤–æ–∫ —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–º`)
  }

  static async checkOverdueRequests() {
    const now = new Date()

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const overdueRequests = await prisma.request.findMany({
      where: {
        slaDeadline: {
          lt: now,
        },
        status: {
          notIn: [RequestStatus.COMPLETED, RequestStatus.CANCELED, RequestStatus.REJECTED],
        },
        isOverdue: false,
      },
      include: {
        client: {
          select: {
            firstName: true,
            lastName: true,
          },
        },
        assignedUser: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
          },
        },
        office: {
          select: {
            name: true,
          },
        },
      },
    })

    for (const request of overdueRequests) {
      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é
      await prisma.request.update({
        where: { id: request.id },
        data: {
          isOverdue: true,
        },
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞—Å—Å–∏—Ä—É
      if (request.assignedUser) {
        await prisma.notification.create({
          data: {
            userId: request.assignedUser.id,
            type: NotificationType.SLA_OVERDUE,
            title: 'SLA –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!',
            message: `–ó–∞—è–≤–∫–∞ ${request.requestId} (${request.client.firstName}) –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞`,
            payload: {
              requestId: request.id,
              clientName: request.client.firstName,
              isOverdue: true,
            },
          },
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      const admins = await prisma.user.findMany({
        where: {
          role: 'ADMIN',
          isActive: true,
        },
        select: {
          id: true,
        },
      })

      for (const admin of admins) {
        await prisma.notification.create({
          data: {
            userId: admin.id,
            type: NotificationType.SYSTEM,
            title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞',
            message: `–ó–∞—è–≤–∫–∞ ${request.requestId} –≤ –æ—Ñ–∏—Å–µ ${request.office?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ–∏—Å'} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞`,
            payload: {
              requestId: request.id,
              officeName: request.office?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ–∏—Å',
              isOverdue: true,
            },
          },
        })
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
      await prisma.auditLog.create({
        data: {
          actorId: 'system',
          entityType: 'request',
          entityId: request.id,
          action: 'sla_overdue',
          oldValues: {
            slaDeadline: request.slaDeadline,
          },
        },
      })
    }

    if (overdueRequests.length > 0) {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${overdueRequests.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫`)
    }
  }

  static async sendDailyReport() {
    const yesterday = new Date()
    yesterday.setDate(yesterday.getDate() - 1)

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
    const yesterdayStats = await prisma.request.findMany({
      where: {
        createdAt: {
          gte: yesterday,
          lt: new Date(),
        },
      },
    })

    const completedCount = yesterdayStats.filter(r => r.status === RequestStatus.COMPLETED).length
    const totalVolume = await prisma.requestFinance.aggregate({
      where: {
        request: {
          createdAt: {
            gte: yesterday,
            lt: new Date(),
          },
          status: RequestStatus.COMPLETED,
        },
      },
      _sum: {
        expectedAmountFrom: true,
      },
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    const admins = await prisma.user.findMany({
      where: {
        role: 'ADMIN',
        isActive: true,
      },
      select: {
        id: true,
      },
    })

    for (const admin of admins) {
      await prisma.notification.create({
        data: {
          userId: admin.id,
          type: NotificationType.SYSTEM,
          title: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
          message: `–í—á–µ—Ä–∞: ${yesterdayStats.length} –∑–∞—è–≤–æ–∫, ${completedCount} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –æ–±—ä–µ–º: ${totalVolume._sum.expectedAmountFrom || 0} USDT`,
          payload: {
            reportType: 'daily',
            totalRequests: yesterdayStats.length,
            completedRequests: completedCount,
            totalVolume: totalVolume._sum.expectedAmountFrom || 0,
            date: yesterday.toISOString(),
          },
        },
      })
    }

    console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`)
  }

  static async sendReminder(requestId: string) {
    try {
      const request = await prisma.request.findUnique({
        where: { id: requestId },
        include: {
          client: {
            select: {
              telegramUserId: true,
              firstName: true,
            },
          },
          office: {
            select: {
              name: true,
            },
          },
        },
      })

      if (!request) {
        console.error(`–ó–∞—è–≤–∫–∞ ${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
        return
      }

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ${request.client.firstName} –ø–æ –∑–∞—è–≤–∫–µ ${request.requestId}`)

      // –í –±—É–¥—É—â–µ–º:
      // await telegramBot.sendMessage(request.client.telegramUserId, reminderMessage)

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error)
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SLA –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if (typeof window === 'undefined') {
  // –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  SLAMonitor.start()
}
