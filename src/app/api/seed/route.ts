import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient, UserRole, RequestStatus, OperationDirection, NetworkType } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è development/–ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const { authorization } = Object.fromEntries(request.headers.entries())
    
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (authorization !== 'Bearer seed-database-token') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–æ—Ñ–∏—Å—ã
    const office1 = await prisma.office.upsert({
      where: { id: 'office-001' },
      update: {},
      create: {
        id: 'office-001',
        name: '–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å',
        city: '–ú–æ—Å–∫–≤–∞',
        address: '—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1',
        phone: '+7 (495) 123-45-67',
        email: 'main@crypto-exchange.ru',
        activeCurrencies: ['USDT', 'BTC', 'ETH', 'TRY'],
        activeNetworks: ['ETH', 'TRON', 'BSC', 'TON'],
        isActive: true,
      },
    })

    const office2 = await prisma.office.upsert({
      where: { id: 'office-002' },
      update: {},
      create: {
        id: 'office-002',
        name: '–û—Ñ–∏—Å –Ω–∞ –ê—Ä–±–∞—Ç–µ',
        city: '–ú–æ—Å–∫–≤–∞',
        address: '—É–ª. –ê—Ä–±–∞—Ç, 15',
        phone: '+7 (495) 987-65-43',
        email: 'arbat@crypto-exchange.ru',
        activeCurrencies: ['USDT', 'BTC', 'TRY'],
        activeNetworks: ['TRON', 'BSC'],
        isActive: true,
      },
    })

    console.log('‚úÖ –û—Ñ–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã')

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const hashedAdminPassword = await bcrypt.hash('admin123', 12)
    const hashedCashierPassword = await bcrypt.hash('cashier123', 12)

    const admin = await prisma.user.upsert({
      where: { username: 'admin' },
      update: {},
      create: {
        id: 'user-admin',
        username: 'admin',
        email: 'admin@crypto-exchange.ru',
        firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        lastName: '–°–∏—Å—Ç–µ–º—ã',
        role: UserRole.ADMIN,
        officeIds: [office1.id, office2.id],
        isActive: true,
        password: hashedAdminPassword,
      },
    })

    const cashier1 = await prisma.user.upsert({
      where: { username: 'cashier1' },
      update: {},
      create: {
        id: 'user-cashier-1',
        username: 'cashier1',
        email: 'cashier1@crypto-exchange.ru',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        role: UserRole.CASHIER,
        officeIds: [office1.id],
        isActive: true,
        password: hashedCashierPassword,
      },
    })

    const cashier2 = await prisma.user.upsert({
      where: { username: 'cashier2' },
      update: {},
      create: {
        id: 'user-cashier-2',
        username: 'cashier2',
        email: 'cashier2@crypto-exchange.ru',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
        role: UserRole.CASHIER,
        officeIds: [office2.id],
        isActive: true,
        password: hashedCashierPassword,
      },
    })

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã')

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∫–ª–∏–µ–Ω—Ç–æ–≤
    const client1 = await prisma.client.upsert({
      where: { telegramUserId: '123456789' },
      update: {},
      create: {
        telegramUserId: '123456789',
        username: 'demo_user_1',
        firstName: '–î–º–∏—Ç—Ä–∏–π',
        lastName: '–°–∏–¥–æ—Ä–æ–≤',
        phone: '+7 (999) 123-45-67',
        tags: ['VIP', 'high-volume'],
        isBlocked: false,
        totalRequests: 15,
        totalVolume: 25000,
      },
    })

    const client2 = await prisma.client.upsert({
      where: { telegramUserId: '987654321' },
      update: {},
      create: {
        telegramUserId: '987654321',
        username: 'demo_user_2',
        firstName: '–ê–Ω–Ω–∞',
        lastName: '–ö–æ–∑–ª–æ–≤–∞',
        tags: ['regular'],
        isBlocked: false,
        totalRequests: 3,
        totalVolume: 1500,
      },
    })

    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã')

    return NextResponse.json({
      success: true,
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!',
      users: [
        { username: 'admin', password: 'admin123', role: 'ADMIN' },
        { username: 'cashier1', password: 'cashier123', role: 'CASHIER' },
        { username: 'cashier2', password: 'cashier123', role: 'CASHIER' },
      ],
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}
