import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient, UserRole } from '@prisma/client'

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const { authorization } = Object.fromEntries(request.headers.entries())
    if (authorization !== 'Bearer setup-permissions-token') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞
    const allPermissions = await prisma.permission.findMany()
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${allPermissions.length} –ø—Ä–∞–≤`)

    // –ü—Ä–∞–≤–∞ –¥–ª—è –∫–∞—Å—Å–∏—Ä–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ)
    const cashierPermissions = [
      '–î–æ—Å—Ç—É–ø –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
      '–î–æ—Å—Ç—É–ø –∫ –∑–∞—è–≤–∫–∞–º',
      '–î–æ—Å—Ç—É–ø –∫ –∫–ª–∏–µ–Ω—Ç–∞–º',
      '–î–æ—Å—Ç—É–ø –∫ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏',
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏',
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏',
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç',
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏',
      '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏',
      '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏',
      '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏',
      '–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞',
      '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞',
      '–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
      '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏',
      '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤'
    ]

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏
    await prisma.rolePermission.deleteMany()

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const adminRolePermissions = await Promise.all(
      allPermissions.map(permission =>
        prisma.rolePermission.create({
          data: {
            role: UserRole.ADMIN,
            permissionId: permission.id,
            isActive: true
          }
        })
      )
    )

    console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ ${adminRolePermissions.length} –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`)

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –∫–∞—Å—Å–∏—Ä—É
    const cashierRolePermissions = await Promise.all(
      allPermissions
        .filter(p => cashierPermissions.includes(p.name))
        .map(permission =>
          prisma.rolePermission.create({
            data: {
              role: UserRole.CASHIER,
              permissionId: permission.id,
              isActive: true
            }
          })
        )
    )

    console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ ${cashierRolePermissions.length} –ø—Ä–∞–≤ –∫–∞—Å—Å–∏—Ä—É`)

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!',
      stats: {
        totalPermissions: allPermissions.length,
        adminPermissions: adminRolePermissions.length,
        cashierPermissions: cashierRolePermissions.length
      }
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–∞–≤:', error)
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}
